// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(vss_rust_client_ffiFFI)
    import vss_rust_client_ffiFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_vss_rust_client_ffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_vss_rust_client_ffi_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        throw CancellationError()

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return try Data(readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

public struct KeyValue {
    public var key: String
    public var value: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(key: String, value: Data) {
        self.key = key
        self.value = value
    }
}

extension KeyValue: Equatable, Hashable {
    public static func == (lhs: KeyValue, rhs: KeyValue) -> Bool {
        if lhs.key != rhs.key {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(key)
        hasher.combine(value)
    }
}

public struct FfiConverterTypeKeyValue: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyValue {
        return try KeyValue(
            key: FfiConverterString.read(from: &buf),
            value: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: KeyValue, into buf: inout [UInt8]) {
        FfiConverterString.write(value.key, into: &buf)
        FfiConverterData.write(value.value, into: &buf)
    }
}

public func FfiConverterTypeKeyValue_lift(_ buf: RustBuffer) throws -> KeyValue {
    return try FfiConverterTypeKeyValue.lift(buf)
}

public func FfiConverterTypeKeyValue_lower(_ value: KeyValue) -> RustBuffer {
    return FfiConverterTypeKeyValue.lower(value)
}

public struct KeyVersion {
    public var key: String
    public var version: Int64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(key: String, version: Int64) {
        self.key = key
        self.version = version
    }
}

extension KeyVersion: Equatable, Hashable {
    public static func == (lhs: KeyVersion, rhs: KeyVersion) -> Bool {
        if lhs.key != rhs.key {
            return false
        }
        if lhs.version != rhs.version {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(key)
        hasher.combine(version)
    }
}

public struct FfiConverterTypeKeyVersion: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyVersion {
        return try KeyVersion(
            key: FfiConverterString.read(from: &buf),
            version: FfiConverterInt64.read(from: &buf)
        )
    }

    public static func write(_ value: KeyVersion, into buf: inout [UInt8]) {
        FfiConverterString.write(value.key, into: &buf)
        FfiConverterInt64.write(value.version, into: &buf)
    }
}

public func FfiConverterTypeKeyVersion_lift(_ buf: RustBuffer) throws -> KeyVersion {
    return try FfiConverterTypeKeyVersion.lift(buf)
}

public func FfiConverterTypeKeyVersion_lower(_ value: KeyVersion) -> RustBuffer {
    return FfiConverterTypeKeyVersion.lower(value)
}

public struct ListKeyVersionsResponse {
    public var keyVersions: [KeyVersion]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(keyVersions: [KeyVersion]) {
        self.keyVersions = keyVersions
    }
}

extension ListKeyVersionsResponse: Equatable, Hashable {
    public static func == (lhs: ListKeyVersionsResponse, rhs: ListKeyVersionsResponse) -> Bool {
        if lhs.keyVersions != rhs.keyVersions {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(keyVersions)
    }
}

public struct FfiConverterTypeListKeyVersionsResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ListKeyVersionsResponse {
        return try ListKeyVersionsResponse(
            keyVersions: FfiConverterSequenceTypeKeyVersion.read(from: &buf)
        )
    }

    public static func write(_ value: ListKeyVersionsResponse, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeKeyVersion.write(value.keyVersions, into: &buf)
    }
}

public func FfiConverterTypeListKeyVersionsResponse_lift(_ buf: RustBuffer) throws -> ListKeyVersionsResponse {
    return try FfiConverterTypeListKeyVersionsResponse.lift(buf)
}

public func FfiConverterTypeListKeyVersionsResponse_lower(_ value: ListKeyVersionsResponse) -> RustBuffer {
    return FfiConverterTypeListKeyVersionsResponse.lower(value)
}

public struct VssItem {
    public var key: String
    public var value: Data
    public var version: Int64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(key: String, value: Data, version: Int64) {
        self.key = key
        self.value = value
        self.version = version
    }
}

extension VssItem: Equatable, Hashable {
    public static func == (lhs: VssItem, rhs: VssItem) -> Bool {
        if lhs.key != rhs.key {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        if lhs.version != rhs.version {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(key)
        hasher.combine(value)
        hasher.combine(version)
    }
}

public struct FfiConverterTypeVssItem: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VssItem {
        return try VssItem(
            key: FfiConverterString.read(from: &buf),
            value: FfiConverterData.read(from: &buf),
            version: FfiConverterInt64.read(from: &buf)
        )
    }

    public static func write(_ value: VssItem, into buf: inout [UInt8]) {
        FfiConverterString.write(value.key, into: &buf)
        FfiConverterData.write(value.value, into: &buf)
        FfiConverterInt64.write(value.version, into: &buf)
    }
}

public func FfiConverterTypeVssItem_lift(_ buf: RustBuffer) throws -> VssItem {
    return try FfiConverterTypeVssItem.lift(buf)
}

public func FfiConverterTypeVssItem_lower(_ value: VssItem) -> RustBuffer {
    return FfiConverterTypeVssItem.lower(value)
}

public enum VssError {
    case ConnectionError(errorDetails: String)
    case AuthError(errorDetails: String)
    case StoreError(errorDetails: String)
    case GetError(errorDetails: String)
    case ListError(errorDetails: String)
    case PutError(errorDetails: String)
    case DeleteError(errorDetails: String)
    case InvalidData(errorDetails: String)
    case NetworkError(errorDetails: String)
    case UnknownError(errorDetails: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeVssError.lift(error)
    }
}

public struct FfiConverterTypeVssError: FfiConverterRustBuffer {
    typealias SwiftType = VssError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VssError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .ConnectionError(
                errorDetails: FfiConverterString.read(from: &buf)
            )
        case 2: return try .AuthError(
                errorDetails: FfiConverterString.read(from: &buf)
            )
        case 3: return try .StoreError(
                errorDetails: FfiConverterString.read(from: &buf)
            )
        case 4: return try .GetError(
                errorDetails: FfiConverterString.read(from: &buf)
            )
        case 5: return try .ListError(
                errorDetails: FfiConverterString.read(from: &buf)
            )
        case 6: return try .PutError(
                errorDetails: FfiConverterString.read(from: &buf)
            )
        case 7: return try .DeleteError(
                errorDetails: FfiConverterString.read(from: &buf)
            )
        case 8: return try .InvalidData(
                errorDetails: FfiConverterString.read(from: &buf)
            )
        case 9: return try .NetworkError(
                errorDetails: FfiConverterString.read(from: &buf)
            )
        case 10: return try .UnknownError(
                errorDetails: FfiConverterString.read(from: &buf)
            )
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: VssError, into buf: inout [UInt8]) {
        switch value {
        case let .ConnectionError(errorDetails):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(errorDetails, into: &buf)

        case let .AuthError(errorDetails):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(errorDetails, into: &buf)

        case let .StoreError(errorDetails):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(errorDetails, into: &buf)

        case let .GetError(errorDetails):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(errorDetails, into: &buf)

        case let .ListError(errorDetails):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(errorDetails, into: &buf)

        case let .PutError(errorDetails):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(errorDetails, into: &buf)

        case let .DeleteError(errorDetails):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(errorDetails, into: &buf)

        case let .InvalidData(errorDetails):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(errorDetails, into: &buf)

        case let .NetworkError(errorDetails):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(errorDetails, into: &buf)

        case let .UnknownError(errorDetails):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(errorDetails, into: &buf)
        }
    }
}

extension VssError: Equatable, Hashable {}

extension VssError: Error {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum VssFilterType {
    case prefix
    case exact
}

public struct FfiConverterTypeVssFilterType: FfiConverterRustBuffer {
    typealias SwiftType = VssFilterType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VssFilterType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .prefix

        case 2: return .exact

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: VssFilterType, into buf: inout [UInt8]) {
        switch value {
        case .prefix:
            writeInt(&buf, Int32(1))

        case .exact:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeVssFilterType_lift(_ buf: RustBuffer) throws -> VssFilterType {
    return try FfiConverterTypeVssFilterType.lift(buf)
}

public func FfiConverterTypeVssFilterType_lower(_ value: VssFilterType) -> RustBuffer {
    return FfiConverterTypeVssFilterType.lower(value)
}

extension VssFilterType: Equatable, Hashable {}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeVssItem: FfiConverterRustBuffer {
    typealias SwiftType = VssItem?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeVssItem.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeVssItem.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceTypeKeyValue: FfiConverterRustBuffer {
    typealias SwiftType = [KeyValue]

    public static func write(_ value: [KeyValue], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeKeyValue.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [KeyValue] {
        let len: Int32 = try readInt(&buf)
        var seq = [KeyValue]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeKeyValue.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeKeyVersion: FfiConverterRustBuffer {
    typealias SwiftType = [KeyVersion]

    public static func write(_ value: [KeyVersion], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeKeyVersion.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [KeyVersion] {
        let len: Int32 = try readInt(&buf)
        var seq = [KeyVersion]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeKeyVersion.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeVssItem: FfiConverterRustBuffer {
    typealias SwiftType = [VssItem]

    public static func write(_ value: [VssItem], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeVssItem.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [VssItem] {
        let len: Int32 = try readInt(&buf)
        var seq = [VssItem]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeVssItem.read(from: &buf))
        }
        return seq
    }
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

private func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UnsafeMutableRawPointer,
    pollFunc: (UnsafeMutableRawPointer, UnsafeMutableRawPointer) -> Void,
    completeFunc: (UnsafeMutableRawPointer, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UnsafeMutableRawPointer) -> Void,
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(rustFuture, ContinuationHolder($0).toOpaque())
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
private func uniffiFutureContinuationCallback(ptr: UnsafeMutableRawPointer, pollResult: Int8) {
    ContinuationHolder.fromOpaque(ptr).resume(pollResult)
}

// Wraps UnsafeContinuation in a class so that we can use reference counting when passing it across
// the FFI
private class ContinuationHolder {
    let continuation: UnsafeContinuation<Int8, Never>

    init(_ continuation: UnsafeContinuation<Int8, Never>) {
        self.continuation = continuation
    }

    func resume(_ pollResult: Int8) {
        continuation.resume(returning: pollResult)
    }

    func toOpaque() -> UnsafeMutableRawPointer {
        return Unmanaged<ContinuationHolder>.passRetained(self).toOpaque()
    }

    static func fromOpaque(_ ptr: UnsafeRawPointer) -> ContinuationHolder {
        return Unmanaged<ContinuationHolder>.fromOpaque(ptr).takeRetainedValue()
    }
}

private func uniffiInitContinuationCallback() {
    ffi_vss_rust_client_ffi_rust_future_continuation_callback_set(uniffiFutureContinuationCallback)
}

public func vssDelete(key: String) async throws -> Bool {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_vss_rust_client_ffi_fn_func_vss_delete(
                FfiConverterString.lower(key)
            )
        },
        pollFunc: ffi_vss_rust_client_ffi_rust_future_poll_i8,
        completeFunc: ffi_vss_rust_client_ffi_rust_future_complete_i8,
        freeFunc: ffi_vss_rust_client_ffi_rust_future_free_i8,
        liftFunc: FfiConverterBool.lift,
        errorHandler: FfiConverterTypeVssError.lift
    )
}

public func vssGet(key: String) async throws -> VssItem? {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_vss_rust_client_ffi_fn_func_vss_get(
                FfiConverterString.lower(key)
            )
        },
        pollFunc: ffi_vss_rust_client_ffi_rust_future_poll_rust_buffer,
        completeFunc: ffi_vss_rust_client_ffi_rust_future_complete_rust_buffer,
        freeFunc: ffi_vss_rust_client_ffi_rust_future_free_rust_buffer,
        liftFunc: FfiConverterOptionTypeVssItem.lift,
        errorHandler: FfiConverterTypeVssError.lift
    )
}

public func vssList(prefix: String?) async throws -> [VssItem] {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_vss_rust_client_ffi_fn_func_vss_list(
                FfiConverterOptionString.lower(prefix)
            )
        },
        pollFunc: ffi_vss_rust_client_ffi_rust_future_poll_rust_buffer,
        completeFunc: ffi_vss_rust_client_ffi_rust_future_complete_rust_buffer,
        freeFunc: ffi_vss_rust_client_ffi_rust_future_free_rust_buffer,
        liftFunc: FfiConverterSequenceTypeVssItem.lift,
        errorHandler: FfiConverterTypeVssError.lift
    )
}

public func vssListKeys(prefix: String?) async throws -> [KeyVersion] {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_vss_rust_client_ffi_fn_func_vss_list_keys(
                FfiConverterOptionString.lower(prefix)
            )
        },
        pollFunc: ffi_vss_rust_client_ffi_rust_future_poll_rust_buffer,
        completeFunc: ffi_vss_rust_client_ffi_rust_future_complete_rust_buffer,
        freeFunc: ffi_vss_rust_client_ffi_rust_future_free_rust_buffer,
        liftFunc: FfiConverterSequenceTypeKeyVersion.lift,
        errorHandler: FfiConverterTypeVssError.lift
    )
}

public func vssNewClient(baseUrl: String, storeId: String) async throws {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_vss_rust_client_ffi_fn_func_vss_new_client(
                FfiConverterString.lower(baseUrl),
                FfiConverterString.lower(storeId)
            )
        },
        pollFunc: ffi_vss_rust_client_ffi_rust_future_poll_void,
        completeFunc: ffi_vss_rust_client_ffi_rust_future_complete_void,
        freeFunc: ffi_vss_rust_client_ffi_rust_future_free_void,
        liftFunc: { $0 },
        errorHandler: FfiConverterTypeVssError.lift
    )
}

public func vssNewClientWithLnurlAuth(baseUrl: String, storeId: String, mnemonic: String, passphrase: String?, lnurlAuthServerUrl: String) async throws {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_vss_rust_client_ffi_fn_func_vss_new_client_with_lnurl_auth(
                FfiConverterString.lower(baseUrl),
                FfiConverterString.lower(storeId),
                FfiConverterString.lower(mnemonic),
                FfiConverterOptionString.lower(passphrase),
                FfiConverterString.lower(lnurlAuthServerUrl)
            )
        },
        pollFunc: ffi_vss_rust_client_ffi_rust_future_poll_void,
        completeFunc: ffi_vss_rust_client_ffi_rust_future_complete_void,
        freeFunc: ffi_vss_rust_client_ffi_rust_future_free_void,
        liftFunc: { $0 },
        errorHandler: FfiConverterTypeVssError.lift
    )
}

public func vssPutWithKeyPrefix(items: [KeyValue]) async throws -> [VssItem] {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_vss_rust_client_ffi_fn_func_vss_put_with_key_prefix(
                FfiConverterSequenceTypeKeyValue.lower(items)
            )
        },
        pollFunc: ffi_vss_rust_client_ffi_rust_future_poll_rust_buffer,
        completeFunc: ffi_vss_rust_client_ffi_rust_future_complete_rust_buffer,
        freeFunc: ffi_vss_rust_client_ffi_rust_future_free_rust_buffer,
        liftFunc: FfiConverterSequenceTypeVssItem.lift,
        errorHandler: FfiConverterTypeVssError.lift
    )
}

public func vssShutdownClient() {
    try! rustCall {
        uniffi_vss_rust_client_ffi_fn_func_vss_shutdown_client($0)
    }
}

public func vssStore(key: String, value: Data) async throws -> VssItem {
    return try await uniffiRustCallAsync(
        rustFutureFunc: {
            uniffi_vss_rust_client_ffi_fn_func_vss_store(
                FfiConverterString.lower(key),
                FfiConverterData.lower(value)
            )
        },
        pollFunc: ffi_vss_rust_client_ffi_rust_future_poll_rust_buffer,
        completeFunc: ffi_vss_rust_client_ffi_rust_future_complete_rust_buffer,
        freeFunc: ffi_vss_rust_client_ffi_rust_future_free_rust_buffer,
        liftFunc: FfiConverterTypeVssItem.lift,
        errorHandler: FfiConverterTypeVssError.lift
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 24
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_vss_rust_client_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_vss_rust_client_ffi_checksum_func_vss_delete() != 46571 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vss_rust_client_ffi_checksum_func_vss_get() != 59657 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vss_rust_client_ffi_checksum_func_vss_list() != 16435 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vss_rust_client_ffi_checksum_func_vss_list_keys() != 31884 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vss_rust_client_ffi_checksum_func_vss_new_client() != 949 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vss_rust_client_ffi_checksum_func_vss_new_client_with_lnurl_auth() != 20239 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vss_rust_client_ffi_checksum_func_vss_put_with_key_prefix() != 15750 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vss_rust_client_ffi_checksum_func_vss_shutdown_client() != 27474 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_vss_rust_client_ffi_checksum_func_vss_store() != 42761 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiInitContinuationCallback()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
